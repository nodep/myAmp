; http://www.spinsemi.com/forum/viewtopic.php?t=236
;
; Plate Reverb -- derived from Jon Dattorro paper "Effect Design"
; - Supposedly good sounding with minimal required resources
; - available at: https://ccrma.stanford.edu/~dattorro/EffectDesignPart1.pdf
; - coded by mdroberts1243 'at' gmail.com

;pot0 = pre-delay
;pot1 = reverb time (decay... all the way up is infinite sustain in the tank)
;pot2 = lpf frequency on input

; fixed parameters from the paper
equ	decay_diffusion_1	0.70	;default parameters from Dattorro paper
equ	input_diffusion_1	0.75
equ	input_diffusion_2	0.625

; k1 for freqs:
equ	k1_512Hz	1.65104
equ	k1_1kHz	0.82552
equ	k1_2kHz	0.68148
equ	k1_4kHz	0.46441
equ	k1_12kHz 0.232205
;equ	bandwidth	1-k1_2kHz	; coefficient for input low-pass

; peak excursion for tap modulation
equ	excursion	64

; rates for two tap modulators
; paper calls for 1-2Hz, 25=1Hz, 50=2Hz
equ	lfo0rate	14
equ	lfo1rate	10

; no idea what a suitable pre-delay would be...  could go as high as 7000+ samples
; 655=20ms, 3802=116ms, etc.
mem	predelay		7500	; 3802=116ms predelay at 32kHz

; allpass names are formed from the Dattorro paper node numbers in Figure 1
; all the memory sizes have been scaled up by 1.1010x to account for difference in sampling
; original paper specified sample rate of 29761 Hz, we have 32768

mem	ap13_14		156	; coeff is input_diffusion_1
mem	ap19_20		117	; coeff is input_diffusion_1
mem	ap15_16		417	; coeff is input_diffusion_2
mem	ap21_22		305	; coeff is input_diffusion_2

mem	ap23_24		 740+excursion	; coeff is decay_diffusion_1
mem	ap46_48		1000+excursion	; coeff is decay_diffusion_1

mem	del24_30	4903
mem	del48_54	4643
mem	ap31_33		1982+excursion	; coeff is decay_diffusion_2 (derived from pot1)
mem	ap55_59		2924+excursion	; coeff is decay_diffusion_2
mem	del33_39	4096
mem	del59_63	3483

equ	krl			reg0	; coeff for reverb level (from pot0)
equ	decay			reg1	; coeff for reverb time (from pot1)
equ	decay_diffusion_2	reg2	; related to coeff for reverb time (from delay)
equ	damping			reg3	; coeff for high-frequency decay within the tank
equ	one_minus_dmpg		reg4
equ	lp_inp			reg5	; 'bandwidth' low-pass at input
equ	lp30_31			reg6	; tank low-pass set by 'damping'
equ	lp54_55			reg7	; tank low-pass set by 'damping'
equ	mono			reg8	; mono input signal
equ	diffuse_in		reg9	; output of input diffusers
equ	temp			reg10	; temp for expanded allpass calculations
equ	temp2			reg11	; another temp value for allpass
equ	pd_lpc			reg12	; predelay lopass
equ	pdelo			reg13	; predelay pointer

;
; code starts here!

; now generate a pair of LFOs to modulate the APs in the loop:
skp	run,loop
wlds	SIN0,lfo0rate,excursion
wlds	SIN1,lfo1rate,excursion
wldr    rmp0,0,4096             ;initialize predelay

sof	0, 0.5
wrax	krl,0		; reverb level, write for later use

sof	0, 0.15
wrax	damping, -1		; low-pass coefficient
sof	1, 0.9990234375		; make '1-damping' control from 1- pot2
wrax	one_minus_dmpg,0	; other low pass damping coefficient
loop:

;now derive control coefficients from pots:
; predelay code from OEM1 PA reverb
;
; pot 1 decay time
rdax	pot1,1
;mulx	pot1			; could square it if you like.
wrax	decay, 1		; reverb time

; decay_diffusion_2 = decay + 0.15 but must range between 0.25 to 0.5
sof	1.0,-0.35		; check to see if we will go higher than ceiling (0.35 + 0.15)
skp	neg,1			;
clr				; set ceiling to 0.35 if we are still positive (after restoration below)
sof	1.0,0.35		; restore ACC (could combine with below)
sof	1.0,-0.10		; check to see if we will be below floor (0.10 + 0.15)
skp	gez,1
clr				; clr ACC will set floor to 0.25 after restoration below
sof	1.0,0.25		; restore ACC (+ 0.10) and add 0.15
wrax	decay_diffusion_2,0

; pot2 lpf for pre-delay
rdax	pot2, 0.8		; control input filter
sof	0.95, 0.05
wrax	pd_lpc,0

; sum inputs to mono, with 0.5x input gain adjustment, apply lpf & write to predelay
rdax	adcl, 0.5
rdax	adcr, 0.5
wrax	mono, 1
; lpf the input
rdax	lp_inp,-1
mulx	pd_lpc
rdax	lp_inp,1
wrax	lp_inp,1
wra	predelay,0

; pre-delay code from OEM PA reverb
; pot 0 - predelay
cho     rda,rmp0,reg|compc,predelay ;get outputs from predelay, interpolated
cho     rda,rmp0,0,predelay+1
wrax    pdelo, 0		;write predelay output to register

cho     rdal,rmp0		;read current predelay pointer
rdax    pot0, -0.45		;subtract pot for servo control of pointer
wrax    rmp0_rate,0		;maintain predelay pointer

; predelay low-pass
rdax	pdelo,1
rda	ap13_14#,-input_diffusion_1
wrap	ap13_14,input_diffusion_1
rda	ap19_20#,-input_diffusion_1
wrap	ap19_20,input_diffusion_1
rda	ap15_16#,-input_diffusion_2
wrap	ap15_16,input_diffusion_2
rda	ap21_22#,-input_diffusion_2
wrap	ap21_22,input_diffusion_2
wrax	diffuse_in,0

;
;allpassed input in place, now process the tank (two sides), with filtering
; - all the delays & ap-delays are modulated by LFOs... four different variations

; left side of Figure 1 tank
rda	del59_63#,1

mulx	decay
rdax	diffuse_in,1
wrax	temp,0

cho	rda,sin0,sin|reg|compc,ap23_24#-excursion-1
cho	rda,sin0,sin,ap23_24#-excursion
wrax	temp2,decay_diffusion_1	; store, apply coeff (note flipped sign for this AP)
rdax	temp,1			; add input
wra	ap23_24,-decay_diffusion_1	; write to head of delay
rdax	temp2,1				; add modulated tail

wra	del24_30,0	;delay
rda	del24_30#,1

; simple low-pass with variable control
mulx	one_minus_dmpg
wrax	temp,0
rdax	lp30_31,1	
mulx	damping		;	  damping derived from pot
rdax	temp,1
wrax	lp30_31,1

mulx	decay		; apply decay
wrax	temp,0		; save for applying a bit later...

; another allpass, but WRAP replaced to use variable coefficient
cho	rda,sin1,cos|reg|compc,ap31_33#-excursion-1
cho	rda,sin1,cos,ap31_33#-excursion
wrax	temp2,-1		; store temporarily, and negate
mulx	decay_diffusion_2	; mult with 'negative' coefficient from pot
rdax	temp,1			; add input from temp register
wra	ap31_33,1		; store to delay
mulx	decay_diffusion_2	; apply coeff
rdax	temp2,1			; add back in the modulated tail stored in temp

wra	del33_39,0	; delay
rda	del33_39#,1

; right side of Figure 1 tank, delay output already in ACC
mulx	decay
rdax	diffuse_in,1
wrax	temp,0

cho	 rda,sin0,cos|reg|compc,ap46_48#-excursion-1
cho	 rda,sin0,cos,ap46_48#-excursion
wrax	temp2,decay_diffusion_1	; store, apply coeff (note flipped sign for this AP)
rdax	temp,1			; add input
wra	ap46_48,-decay_diffusion_1
rdax	temp2,1				; add modulated tail

wra	del48_54,0	;delay
rda	del48_54#,1

; simple low-pass with variable control
mulx	one_minus_dmpg
wrax	temp,0
rdax	lp54_55,1	
mulx	damping		;	  damping derived from pot
rdax	temp,1
wrax	lp54_55,1

mulx	decay		; apply decay
wrax	temp,0		; save for applying a bit later...

; another allpass, but WRAP replaced to use variable coefficient
cho	rda,sin1,sin|reg|compc,ap55_59#-excursion-1
cho	rda,sin1,sin,ap55_59#-excursion
wrax	temp2,-1		; store temporarily, and negate
mulx	decay_diffusion_2	; mult with 'negative' coefficient from pot
rdax	temp,1			; add input from temp register
wra	ap55_59,1		; store to delay
mulx	decay_diffusion_2	; apply coeff
rdax	temp2,1			; add back in the modulated tail stored in temp

wra	del59_63,0	; write delay leaving ACC clear

;
;now gather outputs from loop delays (values scaled for different sampling freq):

rda	del48_54+292,0.6
rda	del48_54+3274,0.6
rda	ap55_59+2107,-0.6
rda	del59_63+2198,0.6
rda	del24_30+2192,-0.6
rda	ap31_33+205,-0.6
rda	del33_39+1174,-0.6
mulx	krl				;attenuate reverb by Pot0 setting
wrax	dacl,0

rda	del24_30+389,0.6
rda	del24_30+3993,0.6
rda	ap31_33+1352,-0.6
rda	del33_39+2943,0.6
rda	del48_54+2325,-0.6
rda	ap55_59+369,-0.6
rda	del59_63+133,-0.6
mulx	krl				;attenuate reverb by Pot0 setting
wrax	dacr,0

;
;  DONE	


